#
# CMake
#

CMake_Minimum_Required(VERSION 2.8.12)

#
# Project
#

# Project name.
set(ProjectName "Patrycja")

Project(${ProjectName})

# Enable project folders.
Set_Property(GLOBAL PROPERTY USE_FOLDERS ON)

#
# GLM
#

# Add include directory.
Include_Directories("../External/GLM-0.9.4.6")

#
# SDL2
#

# We are going to use the static library.
Set(SDL_SHARED OFF CACHE BOOL "")
Set(SDL_STATIC ON CACHE BOOL "")

# Add library directory.
Add_SubDirectory("../External/SDL-2.0.1" "SDL2" EXCLUDE_FROM_ALL)

# Add include directory.
Include_Directories("../External/SDL-2.0.1/include")

# Add additional link dependencies.
Link_Directories("$ENV{DXSDK_DIR}/Lib/x86")

# Disable annoying warnings that we can't do anything about.
If(MSVC)
    # C4996: "'x' was declared deprecated."
    Set_Property(TARGET "SDL2-static" APPEND_STRING PROPERTY COMPILE_FLAGS "/wd4996 ")

    # C4018: "Signed/unsigned mismatch."
    Set_Property(TARGET "SDL2-static" APPEND_STRING PROPERTY COMPILE_FLAGS "/wd4018 ")
EndIf()

#
# GLEW
#

# Add library directory.
Add_SubDirectory("../External/GLEW-1.10.0" "GLEW" EXCLUDE_FROM_ALL)

# Add include directory.
Include_Directories("../External/GLEW-1.10.0/include")

#
# FreeType
#

# Add library directory.
Add_SubDirectory("../External/FreeType-2.5.2" "FreeType" EXCLUDE_FROM_ALL)

# Add include directory.
Include_Directories("../External/FreeType-2.5.2/include")

# Disable annoying warnings that we can't do anything about.
If(MSVC)
    # C4996: "This function or variable may be unsafe. Consider using 'x' instead."
    Set_Property(TARGET "freetype" APPEND_STRING PROPERTY COMPILE_FLAGS "/wd4996 ")

    # C4244: "Conversion from 'x' to 'y', possible loss of data."
    Set_Property(TARGET "freetype" APPEND_STRING PROPERTY COMPILE_FLAGS "/wd4244 ")
EndIf()

#
# UTF8
#

# Add include directory.
Include_Directories("../External/UTF8-2.3.4/source")

#
# Source
#

# Source files.
Set(SourceDir "../Source")
Set(PrecompiledHeader "Precompiled.hpp")
Set(PrecompiledSource "Precompiled.cpp")

Set(SourceFiles
    "${PrecompiledHeader}"
    "${PrecompiledSource}"
    "Main.cpp"
    "MainContext.hpp"
    "MainContext.cpp"
    "UserEvents.hpp"
    "Common/NonCopyable.hpp"
    "Common/ScopeGuard.hpp"
    "Common/Utility.hpp"
    "Common/Utility.cpp"
    "Common/StateMachine.hpp"
    "Logger/Logger.hpp"
    "Logger/Logger.cpp"
    "Logger/LoggerOutput.hpp"
    "Logger/LoggerOutputFile.hpp"
    "Logger/LoggerOutputFile.cpp"
    "Logger/LoggerOutputConsole.hpp"
    "Logger/LoggerOutputConsole.cpp"
    "Logger/LoggerMessage.hpp"
    "Logger/LoggerMessage.cpp"
    "Logger/LoggerScopedMessage.hpp"
    "Logger/LoggerScopedMessage.cpp"
    "Console/ConsoleSystem.hpp"
    "Console/ConsoleSystem.cpp"
    "Console/ConsoleHistory.hpp"
    "Console/ConsoleHistory.cpp"
    "Console/ConsoleDefinition.hpp"
    "Console/ConsoleDefinition.cpp"
    "Console/ConsoleCommand.hpp"
    "Console/ConsoleCommand.cpp"
    "Console/ConsoleVariable.hpp"
    "Console/ConsoleVariable.cpp"
    "Console/ConsoleFrame.hpp"
    "Console/ConsoleFrame.cpp"
    "System/FrameCounter.hpp"
    "System/FrameCounter.cpp"
    "Graphics/Shader.hpp"
    "Graphics/Shader.cpp"
    "Graphics/Buffer.hpp"
    "Graphics/Buffer.cpp"
    "Graphics/VertexInput.hpp"
    "Graphics/VertexInput.cpp"
    "Graphics/Texture.hpp"
    "Graphics/Texture.cpp"
    "Graphics/ShapeRenderer.hpp"
    "Graphics/ShapeRenderer.cpp"
    "Graphics/Font.hpp"
    "Graphics/Font.cpp"
    "Graphics/TextRenderer.hpp"
    "Graphics/TextRenderer.cpp"
    "Game/GameContext.hpp"
    "Game/GameContext.cpp"
    "Game/BaseFrame.hpp"
    "Game/MenuFrame.hpp"
    "Game/MenuFrame.cpp"
    "Game/GameFrame.hpp"
    "Game/GameFrame.cpp"
    "Game/Component.hpp"
    "Game/Entity.hpp"
    "Game/Entity.cpp"
    "Game/EntityHandle.hpp"
    "Game/EntitySystem.hpp"
    "Game/EntitySystem.cpp"
    "Game/EntitySubsystem.hpp"
    "Game/EntitySubsystem.cpp"
    "Game/Transform.hpp"
    "Game/Transform.cpp"
    "Game/Input.hpp"
    "Game/Input.cpp"
    "Game/InputState.hpp"
    "Game/InputState.cpp"
    "Game/Script.hpp"
    "Game/Script.cpp"
    "Game/ScriptSystem.hpp"
    "Game/ScriptSystem.cpp"
    "Game/Render.hpp"
    "Game/Render.cpp"
    "Game/RenderSystem.hpp"
    "Game/RenderSystem.cpp"
)

# Add the source directory prefix to each file path.
ForEach(SourceFile ${SourceFiles})
    List(APPEND SourceFilesTemp "${SourceDir}/${SourceFile}")
EndForEach()

Set(SourceFiles ${SourceFilesTemp})
Set(SourceFilesTemp)

# Setup automatic source grouping.
ForEach(SourceFile ${SourceFiles})
    # Get source file path.
    Get_Filename_Component(SourceFilePath ${SourceFile} PATH)
    
    # Remove the base path.
    String(REPLACE "${SourceDir}" "" SourceFilePath ${SourceFilePath})

    # Add source file to a group.
    If(NOT ${SourceFilePath} STREQUAL "")
        # Remove leading folder separator.
        String(SUBSTRING ${SourceFilePath} 0 1 FirstCharacter)
        
        If(FirstCharacter STREQUAL "/" OR FirstCharacter STREQUAL "\\")
            String(LENGTH ${SourceFilePath} SourceFilePathLength)
            Math(EXPR SourceFilePathLength "${SourceFilePathLength} - 1")
            String(SUBSTRING ${SourceFilePath} 1 ${SourceFilePathLength} SourceFilePath)
        EndIf()
    
        # Replace folder separators.
        String(REPLACE "/" "\\" SourceFilePath ${SourceFilePath})
    
        # Add source file to a group.
        Source_Group("Source\\${SourceFilePath}" FILES ${SourceFile})
    Else()
        # Add source file to a default group.
        Source_Group("Source" FILES ${SourceFile})
    EndIf()
EndForEach()

# Add the main source folder as an include directory.
Include_Directories(${SourceDir})

#
# Target
#

# Create an executable target.
Set(TargetName "Game")

Add_Executable(${TargetName} ${SourceFiles})

# Link SDL2 library.
Add_Dependencies(${TargetName} "SDL2-static" "SDL2main")
Target_Link_Libraries(${TargetName} "SDL2-static" "SDL2main")

# Link GLEW library.
Add_Dependencies(${TargetName} "glew32s")
Target_Link_Libraries(${TargetName} "glew32s")

# Link FreeType library.
Add_Dependencies(${TargetName} "freetype")
Target_Link_Libraries(${TargetName} "freetype")

# Set unicode support.
Add_Definitions(-DUNICODE -D_UNICODE)

# Group dependencies in a single folder.
Set_Property(TARGET "SDL2-static" PROPERTY FOLDER "Dependencies")
Set_Property(TARGET "SDL2main" PROPERTY FOLDER "Dependencies")
Set_Property(TARGET "glew32s" PROPERTY FOLDER "Dependencies")
Set_Property(TARGET "freetype" PROPERTY FOLDER "Dependencies")

#
# Debugging
#

# Write a text file in the build's directory that will point the executable to it's working directory.
Get_Filename_Component(WorkingDir "${CMAKE_CURRENT_LIST_DIR}/../Base" ABSOLUTE)

File(WRITE "${CMAKE_BINARY_DIR}/WorkingDir.txt" "${WorkingDir}/")

#
# Windows
#

# Visual C++ specific.
If(MSVC)
    # Remove the console window.
    Set_Property(TARGET ${TargetName} APPEND_STRING PROPERTY LINK_FLAGS "/SUBSYSTEM:Windows ")
    
    # Restore default main() entry instead of WinMain().
    Set_Property(TARGET ${TargetName} APPEND_STRING PROPERTY LINK_FLAGS "/ENTRY:mainCRTStartup ")

    # Disable unsafe Standard C function warnings.
    Set_Property(TARGET ${TargetName} APPEND_STRING PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")
    
    # Set the precompiled header.
    Get_Filename_Component(PrecompiledName ${PrecompiledHeader} NAME_WE)
    
    Set(PrecompiledBinary "$(IntDir)/${PrecompiledName}.pch")
    
    Set_Source_Files_Properties(${SourceFiles} PROPERTIES 
        COMPILE_FLAGS "/Yu\"${PrecompiledHeader}\" /Fp\"${PrecompiledBinary}\""
        OBJECT_DEPENDS "${PrecompiledBinary}"
    )
    
    Set_Source_Files_Properties("${SourceDir}/${PrecompiledSource}" PROPERTIES 
        COMPILE_FLAGS "/Yc\"${PrecompiledHeader}\" /Fp\"${PrecompiledBinary}\""
        OBJECT_OUTPUTS "${PrecompiledBinary}"
    )
EndIf()
